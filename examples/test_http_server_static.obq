# HTTP Server Static File Serving Test
# Tests static file serving with various file types

import http.server
import system.io

Object HttpServerStaticTest {
    @external method testStaticFileServing(): Text {
        io.print("=== HTTP Server Static File Serving Test ===")
        io.print("Testing comprehensive static file capabilities")
        
        # Create and configure server
        server_instance: HttpServerInstance = server.create()
        server.setHost(server_instance, "127.0.0.1")
        server.setPort(server_instance, 8085)
        server.setWorkerThreads(server_instance, 2)
        
        io.print("✅ Server configured on 127.0.0.1:8085")
        
        # Register static file routes
        io.print("\n📁 Registering static file routes:")
        
        # Static file serving for different paths
        static_root_result: Text = server.static(server_instance, "/static", "./static_test_files")
        io.print("   /static/* → ./static_test_files: %s", static_root_result)
        
        static_assets_result: Text = server.static(server_instance, "/assets", "./static_test_files")
        io.print("   /assets/* → ./static_test_files: %s", static_assets_result)
        
        static_public_result: Text = server.static(server_instance, "/public", "./static_test_files")
        io.print("   /public/* → ./static_test_files: %s", static_public_result)
        
        # Also register some dynamic routes for comparison
        io.print("\n🔄 Registering dynamic routes:")
        
        get_api_result: Text = server.get(server_instance, "/api/info", "api_handler")
        io.print("   GET  /api/info: %s", get_api_result)
        
        get_home_result: Text = server.get(server_instance, "/", "home_handler")
        io.print("   GET  /: %s", get_home_result)
        
        # Start the server
        io.print("\n🚀 Starting HTTP server with static file serving...")
        listen_result: Bool = server.listen(server_instance)
        
        if (listen_result) {
            io.print("✅ Static File Server Started Successfully!")
            io.print("")
            io.print("🌐 Server is running at: http://127.0.0.1:8085")
            io.print("")
            io.print("📁 Static File Test Commands:")
            io.print("")
            io.print("   # HTML files:")
            io.print("   curl http://127.0.0.1:8085/static/index.html")
            io.print("   curl http://127.0.0.1:8085/assets/index.html")  
            io.print("   curl http://127.0.0.1:8085/public/index.html")
            io.print("")
            io.print("   # CSS stylesheets:")
            io.print("   curl http://127.0.0.1:8085/static/style.css")
            io.print("   curl -H 'Accept: text/css' http://127.0.0.1:8085/assets/style.css")
            io.print("")
            io.print("   # JavaScript files:")
            io.print("   curl http://127.0.0.1:8085/static/script.js")
            io.print("   curl -H 'Accept: application/javascript' http://127.0.0.1:8085/public/script.js")
            io.print("")
            io.print("   # JSON data:")
            io.print("   curl http://127.0.0.1:8085/static/data.json")
            io.print("   curl -H 'Accept: application/json' http://127.0.0.1:8085/assets/data.json")
            io.print("")
            io.print("   # Plain text:")
            io.print("   curl http://127.0.0.1:8085/static/info.txt")
            io.print("   curl http://127.0.0.1:8085/public/info.txt")
            io.print("")
            io.print("   # Mixed requests (static + dynamic):")
            io.print("   curl http://127.0.0.1:8085/            # Dynamic route")
            io.print("   curl http://127.0.0.1:8085/api/info    # Dynamic API")
            io.print("   curl http://127.0.0.1:8085/static/data.json  # Static JSON")
            io.print("")
            io.print("   # Test MIME types with headers:")
            io.print("   curl -I http://127.0.0.1:8085/static/index.html  # text/html")
            io.print("   curl -I http://127.0.0.1:8085/static/style.css   # text/css")
            io.print("   curl -I http://127.0.0.1:8085/static/script.js   # application/javascript")
            io.print("   curl -I http://127.0.0.1:8085/static/data.json   # application/json")
            io.print("   curl -I http://127.0.0.1:8085/static/info.txt    # text/plain")
            io.print("")
            io.print("   # Browser test:")
            io.print("   open http://127.0.0.1:8085/static/index.html")
            io.print("")
            io.print("💡 Features Demonstrated:")
            io.print("   🔸 Multiple static file mount points (/static, /assets, /public)")
            io.print("   🔸 Automatic MIME type detection based on file extensions")
            io.print("   🔸 HTML, CSS, JavaScript, JSON, and text file serving")
            io.print("   🔸 Proper Content-Type and Content-Length headers")
            io.print("   🔸 Static and dynamic routes working together")
            io.print("   🔸 File path security and proper routing")
            io.print("")
            io.print("⚡ Performance Features:")
            io.print("   🔸 Binary file reading for efficiency")
            io.print("   🔸 Multithreaded static file serving")
            io.print("   🔸 Content-Length header for proper browser caching")
            io.print("   🔸 404 handling for missing static files")
            io.print("")
            io.print("⏳ Server running - test the static files!")
            io.print("🌍 Open a web browser and visit the HTML page to see the full demo")
            
            # Server statistics
            stats: Map = server.getStats(server_instance)
            total_requests: Int = stats.get("total_requests")
            io.print("\n📊 Server statistics - Total requests processed: %d", total_requests)
            
            # Stop the server for this test
            io.print("\n🛑 Stopping server after demonstration...")
            stop_result: Text = server.stop(server_instance)
            io.print("Stop result: %s", stop_result)
            
            return "Static file serving test completed successfully"
        } else {
            io.print("❌ Failed to start static file server")
            return "Static file server startup failed"
        }
    }
}

Object Main {
    method main(): Text {
        tester: HttpServerStaticTest = new HttpServerStaticTest()
        result: Text = tester.testStaticFileServing()
        
        io.print("\n🎉 HTTP Server Static File Test Completed!")
        io.print("The O2L HTTP server now provides:")
        io.print("  ✅ Comprehensive static file serving")
        io.print("  ✅ Multiple mount points and path mapping")
        io.print("  ✅ Automatic MIME type detection")
        io.print("  ✅ Support for HTML, CSS, JS, JSON, text, images")
        io.print("  ✅ Proper HTTP headers (Content-Type, Content-Length)")
        io.print("  ✅ Binary and text file handling")
        io.print("  ✅ 404 error handling for missing files")
        io.print("  ✅ Integration with dynamic routing")
        io.print("")
        io.print("🌟 Ready for full-stack web applications!")
        
        return result
    }
}