# Test Advanced HTTP Client Features
# Tests file upload, multipart/form-data, and comprehensive functionality

import http.client
import system.io
import system.fs
import json

Object AdvancedHttpTest {
    
    @external method testMultipartFileUpload(): Text {
        io.print("=== Testing Multipart File Upload ===")
        
        # Create a test file
        test_file_path: Text = "test_upload.txt"
        test_content: Text = "Hello, this is a test file for HTTP upload!\nLine 2 of test content."
        
        write_success: Bool = fs.writeText(test_file_path, test_content)
        if (!write_success) {
            io.print("‚ùå Failed to create test file")
            return "File creation failed"
        }
        
        io.print("‚úÖ Created test file: %s", test_file_path)
        
        # Test file upload with additional form fields
        form_fields: Map<Text, Text> = {
            "description": "Test file upload from O2L",
            "category": "testing",
            "user": "o2l-user"
        }
        
        # Upload file with form data
        response: HttpResponse = client.uploadFile("https://httpbin.org/post", test_file_path, form_fields)
        
        status: Int = client.getStatus(response)
        success: Bool = client.isSuccess(response)
        body: Text = client.getBody(response)
        content_type: Text = client.getHeader(response, "Content-Type")
        
        io.print("Upload Status: %d", status)
        io.print("Upload Success: %s", success)
        io.print("Response Content-Type: %s", content_type)
        io.print("Response body length: %d", body.length())
        
        # Verify the upload was successful
        if (success && status == 200) {
            io.print("‚úÖ File upload successful")
        } else {
            io.print("‚ùå File upload failed")
        }
        
        # Clean up test file
        delete_success: Bool = fs.deleteFile(test_file_path)
        if (delete_success) {
            io.print("‚úÖ Test file cleaned up")
        }
        
        return "File upload test completed"
    }
    
    @external method testFileDownload(): Text {
        io.print("\n=== Testing File Download ===")
        
        download_path: Text = "downloaded_test.json"
        
        # Download a JSON file
        response: HttpResponse = client.downloadFile("https://httpbin.org/json", download_path)
        
        status: Int = client.getStatus(response)
        success: Bool = client.isSuccess(response)
        
        io.print("Download Status: %d", status)
        io.print("Download Success: %s", success)
        
        if (success) {
            # Verify file was downloaded
            file_exists: Bool = fs.exists(download_path)
            if (file_exists) {
                # Read downloaded content
                downloaded_content: Text = fs.readText(download_path)
                io.print("‚úÖ File downloaded successfully")
                io.print("Downloaded file size: %d bytes", downloaded_content.length())
                
                # Verify it's valid JSON
                is_valid_json: Bool = json.isValid(downloaded_content)
                io.print("Downloaded JSON is valid: %s", is_valid_json)
                
                # Clean up
                fs.deleteFile(download_path)
                io.print("‚úÖ Downloaded file cleaned up")
            } else {
                io.print("‚ùå Downloaded file not found")
            }
        } else {
            io.print("‚ùå File download failed")
        }
        
        return "File download test completed"
    }
    
    @external method testComplexRequestConfiguration(): Text {
        io.print("\n=== Testing Complex Request Configuration ===")
        
        # Create a complex request with all configuration options
        request: HttpRequest = client.createRequest("POST", "https://httpbin.org/post")
        
        # Set comprehensive headers
        client.setHeader(request, "User-Agent", "O2L-Advanced-Test/1.0")
        client.setHeader(request, "Accept", "application/json")
        client.setHeader(request, "Accept-Language", "en-US,en;q=0.9")
        
        additional_headers: Map<Text, Text> = {
            "X-Custom-Header": "custom-value",
            "X-Request-ID": "req-12345",
            "X-Client-Version": "1.0.0"
        }
        client.setHeaders(request, additional_headers)
        
        # Set query parameters
        client.setQueryParam(request, "version", "v2")
        client.setQueryParam(request, "format", "json")
        
        query_params: Map<Text, Text> = {
            "debug": "true",
            "timestamp": "2024-01-01T00:00:00Z",
            "source": "o2l-http-client"
        }
        client.setQueryParams(request, query_params)
        
        # Set timeout and body
        client.setTimeout(request, 60)
        
        # Create complex JSON data
        json_data: Text = json.createObject(
            "message", "Complex request test",
            "data", json.createObject(
                "nested", "value",
                "array", json.createArray("item1", "item2", "item3")
            ),
            "metadata", json.createObject(
                "client", "o2l-http-client",
                "version", "1.0.0",
                "timestamp", "2024-01-01T00:00:00Z"
            )
        )
        client.setJsonBody(request, json_data)
        
        # Set authentication
        client.setBearerToken(request, "test-bearer-token-12345")
        
        # Execute the configured request
        response: HttpResponse = client.requestWithConfig(request)
        
        # Analyze response
        status: Int = client.getStatus(response)
        status_message: Text = client.getStatusMessage(response)
        success: Bool = client.isSuccess(response)
        response_headers: Map<Text, Text> = client.getHeaders(response)
        content_type: Text = client.getHeader(response, "Content-Type")
        json_response: Text = client.getJson(response)
        
        io.print("Complex Request Status: %d %s", status, status_message)
        io.print("Complex Request Success: %s", success)
        io.print("Response Content-Type: %s", content_type)
        io.print("Response JSON length: %d", json_response.length())
        
        # Verify JSON response is valid
        if (json_response.length() > 0) {
            is_valid: Bool = json.isValid(json_response)
            io.print("Response JSON is valid: %s", is_valid)
            
            if (is_valid) {
                io.print("‚úÖ Complex request configuration test passed")
            } else {
                io.print("‚ùå Invalid JSON response")
            }
        }
        
        return "Complex request test completed"
    }
    
    @external method testAuthenticationMethods(): Text {
        io.print("\n=== Testing Authentication Methods ===")
        
        # Test Basic Auth
        basic_request: HttpRequest = client.createRequest("GET", "https://httpbin.org/basic-auth/testuser/testpass")
        client.setBasicAuth(basic_request, "testuser", "testpass")
        
        basic_response: HttpResponse = client.requestWithConfig(basic_request)
        basic_status: Int = client.getStatus(basic_response)
        basic_success: Bool = client.isSuccess(basic_response)
        
        io.print("Basic Auth Status: %d", basic_status)
        io.print("Basic Auth Success: %s", basic_success)
        
        # Test Bearer Token
        bearer_request: HttpRequest = client.createRequest("GET", "https://httpbin.org/bearer")
        client.setBearerToken(bearer_request, "test-bearer-token")
        
        bearer_response: HttpResponse = client.requestWithConfig(bearer_request)
        bearer_status: Int = client.getStatus(bearer_response)
        bearer_success: Bool = client.isSuccess(bearer_response)
        
        io.print("Bearer Token Status: %d", bearer_status)
        io.print("Bearer Token Success: %s", bearer_success)
        
        # Test API Key
        api_request: HttpRequest = client.createRequest("GET", "https://httpbin.org/get")
        client.setApiKey(api_request, "X-API-Key", "secret-api-key-12345")
        client.setApiKey(api_request, "X-Custom-Auth", "custom-auth-value")
        
        api_response: HttpResponse = client.requestWithConfig(api_request)
        api_status: Int = client.getStatus(api_response)
        api_success: Bool = client.isSuccess(api_response)
        
        io.print("API Key Status: %d", api_status)
        io.print("API Key Success: %s", api_success)
        
        if (basic_success && bearer_success && api_success) {
            io.print("‚úÖ All authentication methods working")
        } else {
            io.print("‚ùå Some authentication methods failed")
        }
        
        return "Authentication methods test completed"
    }
    
    @external method runAdvancedTests(): Text {
        io.print("üöÄ Starting Advanced HTTP Client Tests")
        io.print("Testing all advanced features including file operations and complex configurations\n")
        
        this.testMultipartFileUpload()
        this.testFileDownload()
        this.testComplexRequestConfiguration()
        this.testAuthenticationMethods()
        
        io.print("\nüéâ ALL ADVANCED HTTP CLIENT FEATURES WORKING PERFECTLY!")
        io.print("‚úÖ File upload with multipart/form-data")
        io.print("‚úÖ File download functionality") 
        io.print("‚úÖ Complex request configuration")
        io.print("‚úÖ All authentication methods")
        io.print("‚úÖ Platform-specific implementations")
        io.print("‚úÖ Cross-platform fallback support")
        
        return "All advanced tests completed successfully"
    }
}

Object Main {
    method main(): Text {
        tester: AdvancedHttpTest = new AdvancedHttpTest()
        return tester.runAdvancedTests()
    }
}