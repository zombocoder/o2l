# Working Test for $ Parameters in HTTP Route Handlers
# This demonstrates that $ parameters are now properly parsed and accessible

import http.server
import system.io

Object ApiController {
    @external method getUsers($req: HttpRequest, $res: HttpResponse): Text {
        # Test accessing request properties via $ parameters
        http_method: Text = $req.getMethod()
        path: Text = $req.getPath()
        
        # Create response JSON
        response_json: Text = "{\"message\": \"Users endpoint\", \"method\": \"" + http_method + "\", \"path\": \"" + path + "\"}"
        
        # Set JSON response via $ parameter
        $res.json(response_json)
        
        return "Users retrieved successfully"
    }
    
    @external method getUserById($req: HttpRequest, $res: HttpResponse): Text {
        # Test accessing path parameters
        user_id: Text = $req.getParam("id")
        http_method: Text = $req.getMethod()
        path: Text = $req.getPath()
        
        response_json: Text = "{\"user_id\": \"" + user_id + "\", \"method\": \"" + http_method + "\", \"path\": \"" + path + "\"}"
        $res.json(response_json)
        
        return "User " + user_id + " retrieved"
    }
    
    @external method createUser($req: HttpRequest, $res: HttpResponse): Text {
        # Test accessing request body
        body: Text = $req.getBody()
        http_method: Text = $req.getMethod()
        
        # Set status and response
        $res.setStatus(201)
        response_json: Text = "{\"message\": \"User created\", \"method\": \"" + http_method + "\", \"body\": \"" + body + "\"}"
        $res.json(response_json)
        
        return "User created successfully"
    }
}

Object Main {
    method main(): Text {
        io.print("=== $ Parameters Working Test ===")
        io.print("Testing $ parameter access in HTTP route handlers")
        
        # Create server
        server_instance: HttpServerInstance = server.create()
        server.setHost(server_instance, "127.0.0.1")
        server.setPort(server_instance, 8091)
        server.setWorkerThreads(server_instance, 2)
        
        # Create controller
        api_controller: ApiController = ApiController
        
        # Bind methods with $ parameters to routes
        io.print("\nüìç Binding methods with $ parameters:")
        
        server.get(server_instance, "/api/users", api_controller, "getUsers")
        server.get(server_instance, "/api/users/:id", api_controller, "getUserById")  
        server.post(server_instance, "/api/users", api_controller, "createUser")
        
        # Start server
        io.print("\nüöÄ Starting server with $ parameter support...")
        listen_result: Bool = server.listen(server_instance)
        
        if (listen_result) {
            io.print("‚úÖ Server Started with $ Parameters!")
            io.print("")
            io.print("üåê Server running at: http://127.0.0.1:8091")
            io.print("")
            io.print("üß™ Test Commands:")
            io.print("")
            io.print("   # Basic request access:")
            io.print("   curl http://127.0.0.1:8091/api/users")
            io.print("")
            io.print("   # Path parameter access:")
            io.print("   curl http://127.0.0.1:8091/api/users/123")
            io.print("   curl http://127.0.0.1:8091/api/users/456")
            io.print("")
            io.print("   # Request body access:")
            io.print("   curl -X POST http://127.0.0.1:8091/api/users -H 'Content-Type: application/json' -d '{\"name\":\"Alice\",\"age\":25}'")
            io.print("")
            io.print("   # Query parameters:")
            io.print("   curl 'http://127.0.0.1:8091/api/users?page=1&limit=10'")
            io.print("")
            io.print("üí° Features Working:")
            io.print("   ‚úÖ $ parameter syntax parsing")
            io.print("   ‚úÖ $req.getMethod(), $req.getPath() access")
            io.print("   ‚úÖ $req.getParam() for path parameters")
            io.print("   ‚úÖ $req.getBody() for request body")
            io.print("   ‚úÖ $res.json(), $res.setStatus() response control")
            io.print("   ‚úÖ Full object method binding with parameters")
            io.print("")
            io.print("‚è≥ Server running forever - try the test commands!")
            io.print("   Press Ctrl+C to stop the server")
            io.print("")
            
            # Keep server running forever using native waitForever method
            result: Text = server.waitForever(server_instance)
            return result
        } else {
            return "Failed to start server"
        }
    }
}