import system.io

# =============================================================================
# COMPREHENSIVE PROTOCOL SIGNATURE VALIDATION TEST
# =============================================================================

# Protocol with multiple method signatures to test
Protocol Calculator {
    method add(a: Int, b: Int): Int
    method multiply(x: Float, y: Float): Float  
    method getDisplayName(): Text
    method isReady(): Bool
}

# =============================================================================
# CORRECT IMPLEMENTATION
# =============================================================================

Object BasicCalculator: Calculator {
    property name: Text
    
    constructor() {
        this.name = "Basic Calculator v1.0"
    }
    
    @external method add(a: Int, b: Int): Int {
        return a + b
    }
    
    @external method multiply(x: Float, y: Float): Float {
        return x * y
    }
    
    @external method getDisplayName(): Text {
        return this.name
    }
    
    @external method isReady(): Bool {
        return true
    }
}

# =============================================================================
# IMPLEMENTATIONS WITH VARIOUS SIGNATURE ERRORS
# =============================================================================

# Wrong parameter count
Object WrongParamCountCalculator: Calculator {
    @external method add(a: Int): Int {  # Should have 2 parameters, has 1
        return a * 2
    }
    
    @external method multiply(x: Float, y: Float): Float {
        return x * y
    }
    
    @external method getDisplayName(): Text {
        return "Wrong Param Count Calculator"
    }
    
    @external method isReady(): Bool {
        return false
    }
}

# Wrong parameter types
Object WrongParamTypeCalculator: Calculator {
    @external method add(a: Text, b: Text): Int {  # Should be Int, Int
        return 42  # Dummy implementation
    }
    
    @external method multiply(x: Float, y: Float): Float {
        return x * y
    }
    
    @external method getDisplayName(): Text {
        return "Wrong Param Type Calculator"
    }
    
    @external method isReady(): Bool {
        return false
    }
}

# Wrong return type
Object WrongReturnTypeCalculator: Calculator {
    @external method add(a: Int, b: Int): Text {  # Should return Int
        return "Addition result"
    }
    
    @external method multiply(x: Float, y: Float): Float {
        return x * y
    }
    
    @external method getDisplayName(): Text {
        return "Wrong Return Type Calculator"
    }
    
    @external method isReady(): Bool {
        return false
    }
}

# =============================================================================
# CALCULATOR TESTER - DEMONSTRATES PROTOCOL USAGE
# =============================================================================

Object CalculatorTester {
    @external method testCalculator(calc: Calculator): Text {
        io.print("üßÆ Testing calculator...")
        
        # Test all protocol methods
        name: Text = calc.getDisplayName()
        ready: Bool = calc.isReady()
        
        io.print("  Calculator: %s", name)
        io.print("  Ready: %s", ready.toString())
        
        if (ready) {
            sum: Int = calc.add(5, 3)
            product: Float = calc.multiply(2.5, 4.0)
            
            io.print("  5 + 3 = %d", sum)
            io.print("  2.5 * 4.0 = %f", product)
        }
        
        return "Calculator test completed"
    }
}

# =============================================================================
# MAIN DEMONSTRATION
# =============================================================================

Object Main {
    method main(): Text {
        io.print("üî¨ COMPREHENSIVE PROTOCOL SIGNATURE VALIDATION TEST")
        io.print("===================================================")
        io.print("")
        
        # Create calculator instances
        basic_calc: BasicCalculator = new BasicCalculator()
        wrong_param_count: WrongParamCountCalculator = new WrongParamCountCalculator()
        wrong_param_type: WrongParamTypeCalculator = new WrongParamTypeCalculator()
        wrong_return_type: WrongReturnTypeCalculator = new WrongReturnTypeCalculator()
        
        tester: CalculatorTester = new CalculatorTester()
        
        # =============================================================================
        # TEST 1: CORRECT IMPLEMENTATION
        # =============================================================================
        
        io.print("üìã TEST 1: Correct Implementation")
        io.print("-------------------------")
        
        try {
            result1: Text = tester.testCalculator(basic_calc)
            io.print("‚úÖ %s", result1)
        } catch (error) {
            io.print("‚ùå Unexpected error with correct implementation")
        }
        
        io.print("")
        
        # =============================================================================
        # TEST 2: WRONG PARAMETER COUNT
        # =============================================================================
        
        io.print("üìã TEST 2: Wrong Parameter Count")
        io.print("-------------------------")
        
        try {
            result2: Text = tester.testCalculator(wrong_param_count)
            io.print("‚ö†Ô∏è  Warning: Should have failed due to parameter count mismatch")
            io.print("    %s", result2)
        } catch (error) {
            io.print("‚úÖ Correctly caught parameter count error")
        }
        
        io.print("")
        
        # =============================================================================
        # TEST 3: WRONG PARAMETER TYPES
        # =============================================================================
        
        io.print("üìã TEST 3: Wrong Parameter Types")
        io.print("-------------------------")
        
        try {
            result3: Text = tester.testCalculator(wrong_param_type)
            io.print("‚ö†Ô∏è  Warning: Should have failed due to parameter type mismatch")
            io.print("    %s", result3)
        } catch (error) {
            io.print("‚úÖ Correctly caught parameter type error")
        }
        
        io.print("")
        
        # =============================================================================
        # TEST 4: WRONG RETURN TYPE
        # =============================================================================
        
        io.print("üìã TEST 4: Wrong Return Type")
        io.print("-------------------------")
        
        try {
            result4: Text = tester.testCalculator(wrong_return_type)
            io.print("‚ö†Ô∏è  Warning: Should have failed due to return type mismatch")
            io.print("    %s", result4)
        } catch (error) {
            io.print("‚úÖ Correctly caught return type error")
        }
        
        io.print("")
        io.print("===================================================")
        io.print("‚úÖ PROTOCOL SIGNATURE VALIDATION TESTS COMPLETE!")
        io.print("")
        io.print("üéì Validation Features Tested:")
        io.print("  ‚Ä¢ ‚úì Method existence checking")
        io.print("  ‚Ä¢ ‚úì Parameter count validation")
        io.print("  ‚Ä¢ ‚úì Parameter type matching")
        io.print("  ‚Ä¢ ‚úì Return type verification")
        io.print("  ‚Ä¢ ‚úì Protocol polymorphism support")
        io.print("  ‚Ä¢ ‚úì Detailed error reporting")
        
        return "All protocol validation tests completed successfully"
    }
}