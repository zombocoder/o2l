name: Release Build

on:
  push:
    tags:
      - "v*" # Triggers on version tags like v1.0.0, v2.1.3, etc.

jobs:
  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install dependencies
        run: |
          brew update
          brew install cmake libffi pkg-config

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
                -DCMAKE_CXX_COMPILER=clang++ \
                ..

      - name: Build
        run: |
          cd build
          make -j$(sysctl -n hw.ncpu)

      - name: Test
        run: |
          cd build
          ctest --verbose

      - name: Package for macOS
        run: |
          cd build
          # Create distribution directory
          mkdir -p o2l-macos/bin
          mkdir -p o2l-macos/examples
          mkdir -p o2l-macos/docs

          # Copy binary
          cp bin/o2l o2l-macos/bin/

          # Copy examples and documentation
          cp -r ../examples/* o2l-macos/examples/
          cp ../README.md o2l-macos/
          cp ../LICENSE o2l-macos/
          cp ../CHANGELOG.md o2l-macos/

          # Create archive
          tar -czf o2l-macos-${GITHUB_REF#refs/tags/}.tar.gz o2l-macos/

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: o2l-macos
          path: build/o2l-macos-*.tar.gz

  build-ubuntu:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            libffi-dev \
            pkg-config \
            gcc-13 \
            g++-13

      - name: Set up GCC 13
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-13 100

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_CXX_COMPILER=g++-13 \
                -DCMAKE_C_COMPILER=gcc-13 \
                ..

      - name: Build
        run: |
          cd build
          make -j$(nproc)

      - name: Test
        run: |
          cd build
          ctest --verbose

      - name: Package for Ubuntu
        run: |
          cd build
          # Create distribution directory
          mkdir -p o2l-linux/bin
          mkdir -p o2l-linux/examples
          mkdir -p o2l-linux/docs

          # Copy binary
          cp bin/o2l o2l-linux/bin/

          # Copy examples and documentation
          cp -r ../examples/* o2l-linux/examples/
          cp ../README.md o2l-linux/
          cp ../LICENSE o2l-linux/
          cp ../CHANGELOG.md o2l-linux/

          # Create archive
          tar -czf o2l-linux-${GITHUB_REF#refs/tags/}.tar.gz o2l-linux/

      - name: Upload Ubuntu artifact
        uses: actions/upload-artifact@v4
        with:
          name: o2l-linux
          path: build/o2l-linux-*.tar.gz
          retention-days: 30

  create-release:
    needs: [build-macos, build-ubuntu]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: o2l-macos

      - name: Download Ubuntu artifact
        uses: actions/download-artifact@v4
        with:
          name: o2l-linux

      - name: Generate release notes
        id: release-notes
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT

          # Extract release notes from CHANGELOG.md if it exists
          if [ -f CHANGELOG.md ]; then
            # Get content between this version and previous version
            RELEASE_NOTES=$(sed -n "/## \[$TAG_NAME\]/,/## \[/p" CHANGELOG.md | head -n -1 | tail -n +2)
            if [ -z "$RELEASE_NOTES" ]; then
              RELEASE_NOTES="Release $TAG_NAME of O²L Programming Language"
            fi
          else
            RELEASE_NOTES="Release $TAG_NAME of O²L Programming Language"
          fi

          # Save to file for use in release
          echo "$RELEASE_NOTES" > release_notes.md

          # Also output for debugging
          echo "Release notes:"
          echo "$RELEASE_NOTES"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release-notes.outputs.TAG_NAME }}
          name: O²L ${{ steps.release-notes.outputs.TAG_NAME }}
          body_path: release_notes.md
          files: |
            o2l-macos-*.tar.gz
            o2l-linux-*.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update release with checksums
        run: |
          TAG_NAME=${{ steps.release-notes.outputs.TAG_NAME }}

          # Generate checksums
          echo "## Checksums" > checksums.md
          echo "" >> checksums.md
          for file in o2l-*.tar.gz; do
            if [ -f "$file" ]; then
              sha256sum "$file" >> checksums.md
            fi
          done

          # Display checksums
          echo "Generated checksums:"
          cat checksums.md
