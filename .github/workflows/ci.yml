name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release, Debug]
        exclude:
          # Reduce matrix size by excluding some combinations
          - os: windows-latest
            build_type: Debug

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up C++ environment
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ runner.os == 'macOS' && 'clang-18' || 'gcc-13' }}
          vcvarsall: ${{ contains(matrix.os, 'windows') }}
          cmake: true
          ninja: true

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build libgtest-dev libcurl4-openssl-dev gcc-13 g++-13 libffi-dev pkg-config
          # Build and install Google Test
          cd /usr/src/gtest
          sudo cmake CMakeLists.txt
          sudo make
          sudo cp lib/*.a /usr/lib

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja googletest libffi pkg-config

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          vcpkg install gtest:x64-windows

      - name: Configure CMake
        run: |
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -G Ninja ${{ runner.os == 'Linux' && '-DCMAKE_C_COMPILER=gcc-13 -DCMAKE_CXX_COMPILER=g++-13' || '' }}
        env:
          CMAKE_TOOLCHAIN_FILE: ${{ runner.os == 'Windows' && 'C:/vcpkg/scripts/buildsystems/vcpkg.cmake' || '' }}

      - name: Build
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}}

      - name: Test interpreter binary
        run: |
          cd ${{github.workspace}}/build
          ./bin/o2l --version
          ./bin/o2l --help

      - name: Test o2l-fmt binary
        run: |
          cd ${{github.workspace}}/build
          ./bin/o2l-fmt --help

      - name: Test o2l-pkg binary
        run: |
          cd ${{github.workspace}}/build
          ./bin/o2l-pkg --help

      - name: Run unit tests
        working-directory: ${{github.workspace}}/build/tests
        run: ./o2l_tests --gtest_output=xml:test_results.xml

      - name: Test example programs
        run: |
          cd ${{github.workspace}}/build
          echo "Testing basic examples..."
          ./bin/o2l run ../examples/minimal_test.obq
          ./bin/o2l run ../examples/correct_syntax_test.obq
          ./bin/o2l run ../examples/this_method_test.obq

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            ${{github.workspace}}/build/tests/test_results.xml
            ${{github.workspace}}/build/o2l

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up C++ environment
        uses: aminya/setup-cpp@v1
        with:
          compiler: clang
          cmake: true
          cppcheck: true
          clang-format: "15"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libgtest-dev clang-tidy libcurl4-openssl-dev libffi-dev pkg-config

      - name: Check code formatting
        run: |
          find src tests -name "*.cpp" -o -name "*.hpp" | xargs clang-format --dry-run || echo "Formatting issues found but continuing..."

      - name: Run static analysis
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          find src -name "*.cpp" | head -5 | xargs clang-tidy -p build

      - name: Run cppcheck
        run: |
          cppcheck --enable=all --inconclusive --xml --xml-version=2 src/ 2> cppcheck-result.xml || true

      - name: Upload static analysis results
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-results
          path: cppcheck-result.xml

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up C++ environment
        uses: aminya/setup-cpp@v1
        with:
          compiler: gcc
          cmake: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake libgtest-dev libcurl4-openssl-dev gcc-13 g++-13 libffi-dev pkg-config

      - name: Build Release
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc-13 -DCMAKE_CXX_COMPILER=g++-13
          cmake --build build

      - name: Package artifacts
        run: |
          mkdir -p release
          cp build/o2l release/
          cp README.md LICENSE release/
          cp -r examples release/
          tar -czf o2l-linux-x64.tar.gz -C release .

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: O²L ${{ github.ref }}
          body: |
            ## O²L Programming Language Release

            ### New Features
            - See CHANGELOG.md for detailed changes

            ### Download
            - Linux x64: o2l-linux-x64.tar.gz

            ### Installation
            ```bash
            tar -xzf o2l-linux-x64.tar.gz
            cd o2l
            ./o2l --help
            ```
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./o2l-linux-x64.tar.gz
          asset_name: o2l-linux-x64.tar.gz
          asset_content_type: application/gzip
